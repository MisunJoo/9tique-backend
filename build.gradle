buildscript {
    ext {
        springBootVersion = '1.4.1.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'idea'

jar {
    baseName = 'nine_tique'
    version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

// https://gist.github.com/EdwardBeckett/5377401
// http://blog.jongminkim.co.kr/?p=386
sourceSets {
    querydsl {
        java {
            srcDirs = ['src/main/querydsl']
        }
    }
}

configurations {
    compile.exclude module: "spring-boot-starter-jdbc"
    querydslapt
}

dependencies {
    testCompile('org.springframework.boot:spring-boot-starter-test')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-aop')

    // db
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    testCompile('com.h2database:h2')
    runtime('mysql:mysql-connector-java')

    // cache
    compile('org.springframework.boot:spring-boot-starter-cache')

    // lombok
    compileOnly('org.projectlombok:lombok')

    // security
    compile('org.springframework.boot:spring-boot-starter-security')
//	testCompile('org.springframework.security:spring-security-test')
    compile 'io.jsonwebtoken:jjwt:0.7.0'  // jwt

    // apache commons
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'commons-io:commons-io:2.5'

    // queryDSL
    compile 'com.mysema.querydsl:querydsl-jpa:3.7.2'
    compile 'com.mysema.querydsl:querydsl-apt:3.7.2'
}

task generateQueryDSL(type: JavaCompile, group: 'build', description: 'Generates the QueryDSL query types') {
    source = sourceSets.main.java
    classpath = configurations.compile + configurations.querydslapt
    options.compilerArgs = [
            '-proc:only', '-processor', 'com.mysema.query.apt.jpa.JPAAnnotationProcessor'
    ]
    destinationDir = sourceSets.querydsl.java.srcDirs.iterator().next()
    dependencyCacheDir = compileJava.dependencyCacheDir
}
generateQueryDSL.mustRunAfter clean

compileJava {
    dependsOn generateQueryDSL
    source generateQueryDSL.destinationDir
}

compileQuerydslJava {
    dependsOn generateQueryDSL
    options.warnings = false
    classpath += sourceSets.main.runtimeClasspath
}

clean {
    delete sourceSets.querydsl.java.srcDirs
}
//
//idea {
//    module {
//        sourceDirs += file('src/main/querydsl')
//    }
//}


